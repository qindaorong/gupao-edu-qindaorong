package com.design.pattern;

public class 总结 {

    /**
     * 饿汉式
     * 优点：没有加任何的锁、执行效率比较高，在用户体验上来说，比懒汉式更好。
     * 缺点：类加载的时候就初始化，不管用与不用都占着空间，浪费了内存
     */

    /**
     * 懒汉式
     * 优点：在外部需要使用的时候才进行实例化
     * 缺点：在多线程环境下不安全
     */


    /**
     * 双重检查锁模式
     * 优点：线程安全的问题便解决
     * 缺点：synchronized 加锁，在线程数量比较多情况下，如果CPU 分配压力上升，会导致大批
     * 量线程出现阻塞，从而导致程序运行性能大幅下
     */


    /**
     * 静态内部类模式
     * 优点：内部类一定是要在方法调用之前初始化，巧妙地避免了线程安全问
     */


    /**
     * 枚举式单例
     * 优点：在jvm层次决绝了，反射好序列化破坏
     * 缺点：反编译代码，是是饿汉式单例的实现，浪费内存
     */

    /**
     * 容器缓存式单例
     * 优点：便于管理
     * 缺点：线程不安全
     */


    /**
     * ThreadLocal 线程单例
     * 优点：能保证在单个线程中是唯一的，天生的线程安全
     * 缺点：ThreadLocal 不能保证其创建的对象是全局唯一
     */


    /**
     * 破坏单例 （1）反射（2）序列化
     * （1）防止反射破坏单例，在构造方法中添加代码
     * private LazyInnerClassSingleton(){
     * if(LazyHolder.LAZY != null){
     * throw new RuntimeException("不允许创建多个实例");
     * }
     * }
     *
     * （2）防止序列化破坏单例，添加如下代码
     * private Object readResolve(){
     * return INSTANCE;
     * }
     *
     */
}
